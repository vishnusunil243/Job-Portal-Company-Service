// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/adapterInterface.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/vishnusunil243/Job-Portal-Company-Service/entities"
	helperStruct "github.com/vishnusunil243/Job-Portal-Company-Service/internal/helperStruct"
)

// MockAdapterInterface is a mock of AdapterInterface interface.
type MockAdapterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterInterfaceMockRecorder
}

// MockAdapterInterfaceMockRecorder is the mock recorder for MockAdapterInterface.
type MockAdapterInterfaceMockRecorder struct {
	mock *MockAdapterInterface
}

// NewMockAdapterInterface creates a new mock instance.
func NewMockAdapterInterface(ctrl *gomock.Controller) *MockAdapterInterface {
	mock := &MockAdapterInterface{ctrl: ctrl}
	mock.recorder = &MockAdapterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapterInterface) EXPECT() *MockAdapterInterfaceMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockAdapterInterface) AddAddress(arg0 entities.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockAdapterInterfaceMockRecorder) AddAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockAdapterInterface)(nil).AddAddress), arg0)
}

// AddJob mocks base method.
func (m *MockAdapterInterface) AddJob(arg0 entities.Job, arg1 entities.SalaryRange) (entities.Job, entities.SalaryRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJob", arg0, arg1)
	ret0, _ := ret[0].(entities.Job)
	ret1, _ := ret[1].(entities.SalaryRange)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddJob indicates an expected call of AddJob.
func (mr *MockAdapterInterfaceMockRecorder) AddJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockAdapterInterface)(nil).AddJob), arg0, arg1)
}

// AddJobSkill mocks base method.
func (m *MockAdapterInterface) AddJobSkill(arg0 entities.JobSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJobSkill", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJobSkill indicates an expected call of AddJobSkill.
func (mr *MockAdapterInterfaceMockRecorder) AddJobSkill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJobSkill", reflect.TypeOf((*MockAdapterInterface)(nil).AddJobSkill), arg0)
}

// AddLink mocks base method.
func (m *MockAdapterInterface) AddLink(arg0 entities.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLink", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLink indicates an expected call of AddLink.
func (mr *MockAdapterInterfaceMockRecorder) AddLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLink", reflect.TypeOf((*MockAdapterInterface)(nil).AddLink), arg0)
}

// BlockCompany mocks base method.
func (m *MockAdapterInterface) BlockCompany(companyId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCompany", companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockCompany indicates an expected call of BlockCompany.
func (mr *MockAdapterInterfaceMockRecorder) BlockCompany(companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCompany", reflect.TypeOf((*MockAdapterInterface)(nil).BlockCompany), companyId)
}

// CompanyGetJobByDesignation mocks base method.
func (m *MockAdapterInterface) CompanyGetJobByDesignation(companyId, designation string) (entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyGetJobByDesignation", companyId, designation)
	ret0, _ := ret[0].(entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompanyGetJobByDesignation indicates an expected call of CompanyGetJobByDesignation.
func (mr *MockAdapterInterfaceMockRecorder) CompanyGetJobByDesignation(companyId, designation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyGetJobByDesignation", reflect.TypeOf((*MockAdapterInterface)(nil).CompanyGetJobByDesignation), companyId, designation)
}

// CompanyGetJobSkill mocks base method.
func (m *MockAdapterInterface) CompanyGetJobSkill(jobId string, skillId int) (entities.JobSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyGetJobSkill", jobId, skillId)
	ret0, _ := ret[0].(entities.JobSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompanyGetJobSkill indicates an expected call of CompanyGetJobSkill.
func (mr *MockAdapterInterfaceMockRecorder) CompanyGetJobSkill(jobId, skillId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyGetJobSkill", reflect.TypeOf((*MockAdapterInterface)(nil).CompanyGetJobSkill), jobId, skillId)
}

// CompanySignup mocks base method.
func (m *MockAdapterInterface) CompanySignup(arg0 entities.Company) (entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanySignup", arg0)
	ret0, _ := ret[0].(entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompanySignup indicates an expected call of CompanySignup.
func (mr *MockAdapterInterfaceMockRecorder) CompanySignup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanySignup", reflect.TypeOf((*MockAdapterInterface)(nil).CompanySignup), arg0)
}

// CreateProfile mocks base method.
func (m *MockAdapterInterface) CreateProfile(arg0 entities.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockAdapterInterfaceMockRecorder) CreateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockAdapterInterface)(nil).CreateProfile), arg0)
}

// DeleteJob mocks base method.
func (m *MockAdapterInterface) DeleteJob(ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockAdapterInterfaceMockRecorder) DeleteJob(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockAdapterInterface)(nil).DeleteJob), ID)
}

// DeleteJobSkill mocks base method.
func (m *MockAdapterInterface) DeleteJobSkill(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSkill", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobSkill indicates an expected call of DeleteJobSkill.
func (mr *MockAdapterInterfaceMockRecorder) DeleteJobSkill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSkill", reflect.TypeOf((*MockAdapterInterface)(nil).DeleteJobSkill), arg0)
}

// DeleteLink mocks base method.
func (m *MockAdapterInterface) DeleteLink(Id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLink", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLink indicates an expected call of DeleteLink.
func (mr *MockAdapterInterfaceMockRecorder) DeleteLink(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLink", reflect.TypeOf((*MockAdapterInterface)(nil).DeleteLink), Id)
}

// EditAddress mocks base method.
func (m *MockAdapterInterface) EditAddress(arg0 entities.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditAddress indicates an expected call of EditAddress.
func (mr *MockAdapterInterfaceMockRecorder) EditAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAddress", reflect.TypeOf((*MockAdapterInterface)(nil).EditAddress), arg0)
}

// EditName mocks base method.
func (m *MockAdapterInterface) EditName(arg0 entities.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditName", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditName indicates an expected call of EditName.
func (mr *MockAdapterInterfaceMockRecorder) EditName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditName", reflect.TypeOf((*MockAdapterInterface)(nil).EditName), arg0)
}

// EditPhone mocks base method.
func (m *MockAdapterInterface) EditPhone(arg0 entities.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPhone", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditPhone indicates an expected call of EditPhone.
func (mr *MockAdapterInterfaceMockRecorder) EditPhone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPhone", reflect.TypeOf((*MockAdapterInterface)(nil).EditPhone), arg0)
}

// GetAddress mocks base method.
func (m *MockAdapterInterface) GetAddress(profileId string) (entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", profileId)
	ret0, _ := ret[0].(entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockAdapterInterfaceMockRecorder) GetAddress(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockAdapterInterface)(nil).GetAddress), profileId)
}

// GetAllCompanies mocks base method.
func (m *MockAdapterInterface) GetAllCompanies() ([]entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompanies")
	ret0, _ := ret[0].([]entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCompanies indicates an expected call of GetAllCompanies.
func (mr *MockAdapterInterfaceMockRecorder) GetAllCompanies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompanies", reflect.TypeOf((*MockAdapterInterface)(nil).GetAllCompanies))
}

// GetAllJobForCompany mocks base method.
func (m *MockAdapterInterface) GetAllJobForCompany(companyId string) ([]helperStruct.JobHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobForCompany", companyId)
	ret0, _ := ret[0].([]helperStruct.JobHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobForCompany indicates an expected call of GetAllJobForCompany.
func (mr *MockAdapterInterfaceMockRecorder) GetAllJobForCompany(companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobForCompany", reflect.TypeOf((*MockAdapterInterface)(nil).GetAllJobForCompany), companyId)
}

// GetAllJobSkills mocks base method.
func (m *MockAdapterInterface) GetAllJobSkills(jobId string) ([]entities.JobSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobSkills", jobId)
	ret0, _ := ret[0].([]entities.JobSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobSkills indicates an expected call of GetAllJobSkills.
func (mr *MockAdapterInterfaceMockRecorder) GetAllJobSkills(jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobSkills", reflect.TypeOf((*MockAdapterInterface)(nil).GetAllJobSkills), jobId)
}

// GetAllJobs mocks base method.
func (m *MockAdapterInterface) GetAllJobs() ([]helperStruct.JobHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs")
	ret0, _ := ret[0].([]helperStruct.JobHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockAdapterInterfaceMockRecorder) GetAllJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockAdapterInterface)(nil).GetAllJobs))
}

// GetAllLink mocks base method.
func (m *MockAdapterInterface) GetAllLink(profileId string) ([]entities.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLink", profileId)
	ret0, _ := ret[0].([]entities.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLink indicates an expected call of GetAllLink.
func (mr *MockAdapterInterfaceMockRecorder) GetAllLink(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLink", reflect.TypeOf((*MockAdapterInterface)(nil).GetAllLink), profileId)
}

// GetAllNotifyMe mocks base method.
func (m *MockAdapterInterface) GetAllNotifyMe(userId string) ([]helperStruct.NotifyHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotifyMe", userId)
	ret0, _ := ret[0].([]helperStruct.NotifyHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotifyMe indicates an expected call of GetAllNotifyMe.
func (mr *MockAdapterInterfaceMockRecorder) GetAllNotifyMe(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotifyMe", reflect.TypeOf((*MockAdapterInterface)(nil).GetAllNotifyMe), userId)
}

// GetCompanyByEmail mocks base method.
func (m *MockAdapterInterface) GetCompanyByEmail(arg0 string) (entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByEmail", arg0)
	ret0, _ := ret[0].(entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByEmail indicates an expected call of GetCompanyByEmail.
func (mr *MockAdapterInterfaceMockRecorder) GetCompanyByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByEmail", reflect.TypeOf((*MockAdapterInterface)(nil).GetCompanyByEmail), arg0)
}

// GetCompanyById mocks base method.
func (m *MockAdapterInterface) GetCompanyById(companyId string) (entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyById", companyId)
	ret0, _ := ret[0].(entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyById indicates an expected call of GetCompanyById.
func (mr *MockAdapterInterfaceMockRecorder) GetCompanyById(companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyById", reflect.TypeOf((*MockAdapterInterface)(nil).GetCompanyById), companyId)
}

// GetCompanyIdFromJobId mocks base method.
func (m *MockAdapterInterface) GetCompanyIdFromJobId(jobId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyIdFromJobId", jobId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyIdFromJobId indicates an expected call of GetCompanyIdFromJobId.
func (mr *MockAdapterInterfaceMockRecorder) GetCompanyIdFromJobId(jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyIdFromJobId", reflect.TypeOf((*MockAdapterInterface)(nil).GetCompanyIdFromJobId), jobId)
}

// GetHomeUsers mocks base method.
func (m *MockAdapterInterface) GetHomeUsers(designation string) ([]helperStruct.JobHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomeUsers", designation)
	ret0, _ := ret[0].([]helperStruct.JobHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHomeUsers indicates an expected call of GetHomeUsers.
func (mr *MockAdapterInterfaceMockRecorder) GetHomeUsers(designation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomeUsers", reflect.TypeOf((*MockAdapterInterface)(nil).GetHomeUsers), designation)
}

// GetJob mocks base method.
func (m *MockAdapterInterface) GetJob(ID string) (helperStruct.JobHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", ID)
	ret0, _ := ret[0].(helperStruct.JobHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockAdapterInterfaceMockRecorder) GetJob(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockAdapterInterface)(nil).GetJob), ID)
}

// GetNotifyMe mocks base method.
func (m *MockAdapterInterface) GetNotifyMe(companyId, userId string) (entities.NotifyMe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifyMe", companyId, userId)
	ret0, _ := ret[0].(entities.NotifyMe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifyMe indicates an expected call of GetNotifyMe.
func (mr *MockAdapterInterfaceMockRecorder) GetNotifyMe(companyId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifyMe", reflect.TypeOf((*MockAdapterInterface)(nil).GetNotifyMe), companyId, userId)
}

// GetNotifyMeByCompanyId mocks base method.
func (m *MockAdapterInterface) GetNotifyMeByCompanyId(companyId string) ([]helperStruct.NotifyHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifyMeByCompanyId", companyId)
	ret0, _ := ret[0].([]helperStruct.NotifyHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifyMeByCompanyId indicates an expected call of GetNotifyMeByCompanyId.
func (mr *MockAdapterInterfaceMockRecorder) GetNotifyMeByCompanyId(companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifyMeByCompanyId", reflect.TypeOf((*MockAdapterInterface)(nil).GetNotifyMeByCompanyId), companyId)
}

// GetProfileIdFromCompanyId mocks base method.
func (m *MockAdapterInterface) GetProfileIdFromCompanyId(companyId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileIdFromCompanyId", companyId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileIdFromCompanyId indicates an expected call of GetProfileIdFromCompanyId.
func (mr *MockAdapterInterfaceMockRecorder) GetProfileIdFromCompanyId(companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileIdFromCompanyId", reflect.TypeOf((*MockAdapterInterface)(nil).GetProfileIdFromCompanyId), companyId)
}

// GetProfilePic mocks base method.
func (m *MockAdapterInterface) GetProfilePic(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilePic", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilePic indicates an expected call of GetProfilePic.
func (mr *MockAdapterInterfaceMockRecorder) GetProfilePic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilePic", reflect.TypeOf((*MockAdapterInterface)(nil).GetProfilePic), arg0)
}

// JobSearch mocks base method.
func (m *MockAdapterInterface) JobSearch(designation, experience string) ([]helperStruct.JobHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobSearch", designation, experience)
	ret0, _ := ret[0].([]helperStruct.JobHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobSearch indicates an expected call of JobSearch.
func (mr *MockAdapterInterfaceMockRecorder) JobSearch(designation, experience interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobSearch", reflect.TypeOf((*MockAdapterInterface)(nil).JobSearch), designation, experience)
}

// NotifyMe mocks base method.
func (m *MockAdapterInterface) NotifyMe(userId, companyId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMe", userId, companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMe indicates an expected call of NotifyMe.
func (mr *MockAdapterInterfaceMockRecorder) NotifyMe(userId, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMe", reflect.TypeOf((*MockAdapterInterface)(nil).NotifyMe), userId, companyId)
}

// RemoveNotifyMe mocks base method.
func (m *MockAdapterInterface) RemoveNotifyMe(userId, companyId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNotifyMe", userId, companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNotifyMe indicates an expected call of RemoveNotifyMe.
func (mr *MockAdapterInterfaceMockRecorder) RemoveNotifyMe(userId, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotifyMe", reflect.TypeOf((*MockAdapterInterface)(nil).RemoveNotifyMe), userId, companyId)
}

// UnblockCompany mocks base method.
func (m *MockAdapterInterface) UnblockCompany(companyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockCompany", companyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockCompany indicates an expected call of UnblockCompany.
func (mr *MockAdapterInterfaceMockRecorder) UnblockCompany(companyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockCompany", reflect.TypeOf((*MockAdapterInterface)(nil).UnblockCompany), companyID)
}

// UpdateAverageRating mocks base method.
func (m *MockAdapterInterface) UpdateAverageRating(rating float64, companyId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAverageRating", rating, companyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAverageRating indicates an expected call of UpdateAverageRating.
func (mr *MockAdapterInterfaceMockRecorder) UpdateAverageRating(rating, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAverageRating", reflect.TypeOf((*MockAdapterInterface)(nil).UpdateAverageRating), rating, companyId)
}

// UpdateHired mocks base method.
func (m *MockAdapterInterface) UpdateHired(jobId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHired", jobId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHired indicates an expected call of UpdateHired.
func (mr *MockAdapterInterfaceMockRecorder) UpdateHired(jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHired", reflect.TypeOf((*MockAdapterInterface)(nil).UpdateHired), jobId)
}

// UpdateJob mocks base method.
func (m *MockAdapterInterface) UpdateJob(arg0 string, arg1 helperStruct.JobHelper) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockAdapterInterfaceMockRecorder) UpdateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockAdapterInterface)(nil).UpdateJob), arg0, arg1)
}

// UploadImage mocks base method.
func (m *MockAdapterInterface) UploadImage(profileId, image string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", profileId, image)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockAdapterInterfaceMockRecorder) UploadImage(profileId, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockAdapterInterface)(nil).UploadImage), profileId, image)
}
